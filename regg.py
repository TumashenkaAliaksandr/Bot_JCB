import re
import telebot
import book
from string import Template
from telebot import types
import config

# –†–£–°–°–ö–û–ï –ú–ï–ù–Æ
rMenu = book.russian_menu
# –ê–ù–ì–õ–ò–ô–°–ö–û–ï –ú–ï–ù–Æ
eMenu = book.english_menu

bot = telebot.TeleBot(config.TOKEN1)

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_dict = {}


class User:
    def __init__(self, nickname, photo, document):
        self.nickname = nickname
        self.photo = photo
        self.document = document

        keys = book.keyReg

        for key in keys:
            self.key = None


@bot.message_handler(commands=["reg"])
def user_reg(message):
    chat_id = message.chat.id

    if message.text == '/reg':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –Ω–µ–π–º: ')
        bot.register_next_step_handler(message, user_reg)
        return

    user_dict[chat_id] = User(message.text, message.photo, message.document)

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú–∏–Ω—Å–∫')
    btn2 = types.KeyboardButton('–í–∏—Ç–µ–±—Å–∫')
    btn3 = types.KeyboardButton('–ì–æ–º–µ–ª—å')
    btn4 = types.KeyboardButton('–ì—Ä–æ–¥–Ω–æ')
    btn5 = types.KeyboardButton('–ú–æ–≥–∏–ª–µ–≤')
    btn6 = types.KeyboardButton('–ë—Ä–µ—Å—Ç')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)

    msg = bot.send_message(message.chat.id, book.regCity, reply_markup=markup)
    bot.send_sticker(message.chat.id, book.sticker5)
    bot.send_message(message.chat.id, book.regCity1)
    bot.register_next_step_handler(msg, process_city_step)


def process_city_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.city = message.text

    # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardRemove(selective=False)

    msg = bot.send_message(chat_id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ:', reply_markup=markup)
    bot.register_next_step_handler(msg, process_photo_step)


@bot.message_handler(content_types=["photo", "document"])
def process_photo_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.photo:
        user.photo = message.photo[-1]
        user.photo_id = message.photo[-1].file_id
    elif message.document and message.document.mime_type in ['image/jpeg', 'image/png']:
        user.document = message.document
        user.document_id = message.document.file_id

    else:
        msg = bot.reply_to(message, '–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ.')
        bot.register_next_step_handler(msg, process_photo_step)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è")
    bot.register_next_step_handler(msg, process_fullname_step)


def process_fullname_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.fullname = message.text

    msg = bot.send_message(chat_id, 'üìÖ  –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å –º–µ—Å—è—Ü –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è! \n –Ω–∞–ø—Ä–∏–º–µ—Ä: –î–î.–ú–ú.–ì–ì–ì–ì')
    bot.register_next_step_handler(msg, process_age_step)


cli_age = []


def process_age_step(message):
    pattern = re.compile(
        '(?<!\d)(?:0?[1-9]|[12][0-9]|3[01]).(?:0?[1-9]|1[0-2])(?!\d).(?:19[0-9][0-9]|20[01][0-9])(?!\d)', re.IGNORECASE)
    is_valid = pattern.match(message.text)
    if is_valid:
        cli_age.append(message.text)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.age = message.text

        msg = bot.send_message(chat_id, 'üìû  –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        bot.register_next_step_handler(msg, process_phone_step)
    else:
        msg = bot.reply_to(message, 'üòñ  –í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(msg, process_age_step)


cli_phone = []


def process_phone_step(message):
    pattern = re.compile('^(\+)?\d+\D*\d{2}\D*\d{3}\D*\d{2}\D*\d{2}$', re.VERBOSE)
    is_valid = pattern.match(message.text.strip())
    if is_valid:
        cli_phone.append(message.text)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text

        msg = bot.send_message(chat_id, 'üìß  –í–∞—à email:')
        bot.register_next_step_handler(msg, process_email_step)

    else:
        msg = bot.reply_to(message, 'üòñ  –í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg, process_phone_step)


cli_mail = []  # –•—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –ø–æ—á—Ç—É –∑–∞—è–≤–∏—Ç–µ–ª—è


def process_email_step(message):
    pattern = re.compile('(^|\s)[-a-z0-9_.]+@([-a-z0-9]+\.)+[a-z]{2,6}(\s|$)',
                         re.IGNORECASE)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω
    is_valid = pattern.match(message.text)
    if is_valid:
        cli_mail.append(message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ—á—Ç—É

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.email = message.text

        msg = bot.send_message(chat_id, 'üçè –ß–µ–º –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –∫–ª—É–±—É?')
        bot.register_next_step_handler(msg, process_effective_step)

    else:
        msg = bot.reply_to(message, 'üòñ  –í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.')
        bot.register_next_step_handler(msg, process_email_step)


def process_effective_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.effective = message.text

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    ibtn1 = types.KeyboardButton('XJ')
    ibtn2 = types.KeyboardButton('XK')
    ibtn3 = types.KeyboardButton('XF')
    ibtn4 = types.KeyboardButton('S-Type')
    ibtn5 = types.KeyboardButton('X-Type')
    ibtn6 = types.KeyboardButton('F-Type')
    ibtn7 = types.KeyboardButton('XJ220')
    ibtn8 = types.KeyboardButton('XK8')
    ibtn9 = types.KeyboardButton('XE')
    ibtn10 = types.KeyboardButton('E-Type')
    ibtn11 = types.KeyboardButton('F-Pace')
    ibtn12 = types.KeyboardButton('E-Pace')
    ibtn13 = types.KeyboardButton('I-Pace')
    markup.add(ibtn1, ibtn2, ibtn3, ibtn4, ibtn5, ibtn6, ibtn7, ibtn8, ibtn9, ibtn10,
               ibtn11, ibtn12, ibtn13)

    msg = bot.send_message(chat_id, 'üöò –ö–∞–∫–∞—è —É –≤–∞—Å –º–æ–¥–µ–ª—å Jaguar?:', reply_markup=markup)
    bot.register_next_step_handler(msg, process_carModel_step)


def process_carModel_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.carModel = message.text

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ë–µ–∂–µ–≤—ã–π')
    itembtn2 = types.KeyboardButton('–ë–µ–ª—ã–π')
    itembtn3 = types.KeyboardButton('–ì–æ–ª—É–±–æ–π')
    itembtn4 = types.KeyboardButton('–ñ–µ–ª—Ç—ã–π')
    itembtn5 = types.KeyboardButton('–ó–µ–ª–µ–Ω—ã–π')
    itembtn6 = types.KeyboardButton('–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π')
    itembtn7 = types.KeyboardButton('–ö—Ä–∞—Å–Ω—ã–π')
    itembtn8 = types.KeyboardButton('–û—Ä–∞–Ω–∂–µ–≤—ã–π')
    itembtn9 = types.KeyboardButton('–†–æ–∑–æ–≤—ã–π')
    itembtn10 = types.KeyboardButton('–°–µ—Ä—ã–π')
    itembtn11 = types.KeyboardButton('–°–∏–Ω–∏–π')
    itembtn12 = types.KeyboardButton('–§–∏–æ–ª–µ—Ç–æ–≤—ã–π')
    itembtn13 = types.KeyboardButton('–ß–µ—Ä–Ω—ã–π')
    markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9, itembtn10,
               itembtn11, itembtn12, itembtn13)

    msg = bot.send_message(chat_id, 'üåà –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', reply_markup=markup)
    bot.register_next_step_handler(msg, process_carColor_step)


def process_carColor_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.carColor = message.text

    msg = bot.send_message(chat_id, 'üé∞ –ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:')
    bot.register_next_step_handler(msg, process_carNumber_step)


def process_carNumber_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.carNumber = message.text

    msg = bot.send_message(chat_id, 'üõ¢ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:')
    bot.register_next_step_handler(msg, process_carFuel_step)


def process_carFuel_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.carFuel = message.text

    msg = bot.send_message(chat_id, 'üçº –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–∫—É–±.—Å–º):')
    bot.register_next_step_handler(msg, process_engineVolume_step)


def process_engineVolume_step(message):
    try:
        int(message.text)
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.engineVolume = message.text

        msg = bot.send_message(chat_id, 'üóì –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:')
        bot.register_next_step_handler(msg, process_carDate_step)

    except Exception as e:
        msg = bot.reply_to(message, '–ù–µ —Ç–æ—Ç –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∏—â! –í–≤–µ–¥–∏ –∏—Å—á–æ!')
        bot.register_next_step_handler(msg, process_engineVolume_step)


def process_carDate_step(message):
    int(message.text)
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.carDate = message.text

    # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    # –≤—Å–µ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    bot.send_message(chat_id, 'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='–î–∞ ', callback_data='yes')
    keyboard.add(key_yes)
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç ', callback_data='no')
    keyboard.add(key_no)
    bot.send_message(chat_id, getRegData(user, 'üóø  –í–∞—à –Ω–∏–∫ –Ω–µ–π–º: '), parse_mode="Markdown")
    if user.document:
        bot.send_document(chat_id, caption='–í–∞—à–µ —Ñ–æ—Ç–æ', data=user.document_id, reply_markup=keyboard)
    elif user.photo:
        bot.send_photo(chat_id, caption='–í–∞—à–µ —Ñ–æ—Ç–æ', photo=user.photo_id, reply_markup=keyboard)



def getRegData(user, title):
    t = Template(
        book.Templ
    )
    return t.substitute({
        'title': title,
        'nickname': user.nickname,
        'userCity': user.city,
        'fullname': user.fullname,
        'age': user.age,
        'phone': user.phone,
        'email': user.email,
        'effective': user.effective,
        'carModel': user.carModel,
        'carColor': user.carColor,
        'carNumber': user.carNumber,
        'carFuel': user.carFuel,
        'engineVolume': user.engineVolume,
        'carDate': user.carDate

    })


@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"])  # —Ç–µ–ø–µ—Ä—å —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ yes –∏ no
def callback_worker(call):
    if call.data == "yes":
        bot.send_message(call.message.chat.id, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! ")
        bot.send_message(call.message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–ª–æ–≤–∞—Ç—å –≤ ' + call.message.from_user.first_name,
                         reply_markup=rMenu)


    elif call.data == "no":
        bot.send_message(call.message.chat.id, "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! ")
        bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –Ω–µ–π–º: ')
        bot.register_next_step_handler(call.message, user_reg)
